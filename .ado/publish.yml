# Publishing VSCode Extensions: https://code.visualstudio.com/api/working-with-extensions/publishing-extension
#   * $(PAT): https://stackoverflow.com/questions/58192624/publishing-vs-code-extension-via-azure-devops/58195815#58195815
#   * Extension Manifest (package.json): https://code.visualstudio.com/api/references/extension-manifest
# Building Py .whl for multiple Linux distros - manylinux: https://github.com/pypa/manylinux
# aarch64 (ARM64) support for manylinux builds: https://codepyre.com/2019/12/arming-yourself/

name: $(BuildId)

trigger: none
pr: none

variables:
  CARGO_TERM_COLOR: always
  RUST_TOOLCHAIN_VERSION: "1.72"

# variables set by pipeline
# - BUILD_NUMBER
# - BUILD_TYPE
# - cratesIoFeedOverride
# - OwnerPersonalAlias
# - PAT
# - toolchainFeed

jobs:
- job: "Node"
  pool:
    vmImage: 'ubuntu-latest'
  timeoutInMinutes: 90

  steps:
  # common init steps
  - script: |
      rustup override set $(RUST_TOOLCHAIN_VERSION)
      cargo --version
      rustc --version
    displayName: Install Rust toolchain

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.11'

  - script: |
      python ./prereqs.py --install && python ./version.py
    displayName: Install Prereqs and set version

  # build steps

  - script: |
      python build.py --npm --wasm
    displayName: Build VSCode Extension
    condition: and(eq(variables['Agent.OS'], 'Linux'), eq(variables['arch'], 'x86_64'))

  - script: |
      mkdir -p '$(System.DefaultWorkingDirectory)/target/npm'
      npm pack --pack-destination '$(System.DefaultWorkingDirectory)/target/npm'
    displayName: Pack NPM Package
    workingDirectory: '$(System.DefaultWorkingDirectory)/npm'
    condition: and(eq(variables['Agent.OS'], 'Linux'), eq(variables['arch'], 'x86_64'))

  - publish: $(System.DefaultWorkingDirectory)/target/npm
    artifact: NPM
    displayName: Upload NPM Package Artifact
    condition: and(eq(variables['Agent.OS'], 'Linux'), eq(variables['arch'], 'x86_64'))

- job: "VSCode"
  pool:
    vmImage: 'ubuntu-latest'
  timeoutInMinutes: 90

  steps:
  # common init steps
  - script: |
      rustup override set $(RUST_TOOLCHAIN_VERSION)
      cargo --version
      rustc --version
    displayName: Install Rust toolchain

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.11'

  - script: |
      python ./prereqs.py --install && python ./version.py
    displayName: Install Prereqs and set version

  # Below VS Code extension build only needs to run on one platform (Linux x86_64 for now)
  - script: |
      npm install -g @vscode/vsce
    displayName: Install Prereqs for VSCode Extension
    condition: and(eq(variables['Agent.OS'], 'Linux'), eq(variables['arch'], 'x86_64'))

  # build steps

  - script: |
      python build.py --wasm --npm --vscode
    displayName: Build VSCode Extension
    condition: and(eq(variables['Agent.OS'], 'Linux'), eq(variables['arch'], 'x86_64'))

  # TODO: When the VSCode Extension is ready for publishing, remove the `--pre-release` flag for 'stable' BUILD_TYPE
  - script: |
      vsce package --pre-release
    displayName: Pack VSCode Extension
    workingDirectory: '$(System.DefaultWorkingDirectory)/vscode'
    condition: and(eq(variables['Agent.OS'], 'Linux'), eq(variables['arch'], 'x86_64'))

  - publish: $(System.DefaultWorkingDirectory)/vscode
    artifact: VSIX
    displayName: Upload VSCode Extension Artifact
    condition: and(eq(variables['Agent.OS'], 'Linux'), eq(variables['arch'], 'x86_64'))


- job: "JupyterLab"
  pool:
    vmImage: 'ubuntu-latest'
  timeoutInMinutes: 90

  steps:
  # common init steps

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.11'

  - script: |
      python ./prereqs.py --install && python ./version.py
    displayName: Install Prereqs and set version

  - script: |
      python ./build.py --jupyterlab --no-check
    displayName: Build JupyterLab Package

  - script: |
      ls target/wheels/*

  - publish: $(System.DefaultWorkingDirectory)/target/wheels/
    artifact: Wheels.JupyterLab
    displayName: Upload JupyterLab Python Artifacts

- job: "PlatformSpecificPython"
  strategy:
    matrix:
      linux_x64:
        imageName: 'ubuntu-20.04'
        arch: x86_64
        additionalRustTargets: aarch64-unknown-linux-gnu
      mac:
        imageName: 'macOS-latest'       # MacOS-specific Py (Mac is usually quite limited).
        arch: x86_64
        additionalRustTargets: aarch64-apple-darwin
      windows:
        imageName: 'windows-latest'     # Win-specific Py + Platform-independent Py.
        arch: x86_64
        additionalRustTargets: aarch64-pc-windows-msvc
  pool:
    vmImage: $(imageName)
  variables:
    arch: $(arch)
  timeoutInMinutes: 90

  steps:
  # common init steps
  - task: RustInstaller@1
    inputs:
      rustVersion: ms-$(RUST_TOOLCHAIN_VERSION)
      additionalTargets: $(additionalRustTargets)
      cratesIoFeedOverride: $(cratesIoFeedOverride)
      toolchainFeed: $(toolchainFeed)
    displayName: Install Rust toolchain

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.11'

  - script: |
      python ./prereqs.py --install && python ./version.py
    displayName: Install Prereqs and set version

  - script: |
      python build.py --pip --no-check-prereqs
    displayName: Build Platform-Dependent Py Packages, non-Linux

  - script: |
      python -m pip install auditwheel
      ls target/wheels
      ls target/wheels/*.whl | echo "$(pwd)/$_" | xargs auditwheel repair --wheel-dir ./target/wheels/
      ls target/wheels
    displayName: Run auditwheel for Linux Wheels
    condition: eq(variables['Agent.OS'], 'Linux')

  - script: |
      dir target\wheels\*
    displayName: List Py Packages on Win
    condition: eq(variables['Agent.OS'], 'Windows_NT')

  - script: |
      ls target/wheels/*
    displayName: List Py Packages on non-Win
    condition: ne(variables['Agent.OS'], 'Windows_NT')

  - publish: $(System.DefaultWorkingDirectory)/target/wheels
    artifact: Wheels.Mac
    displayName: Upload Python Artifacts Mac
    condition: eq(variables['Agent.OS'], 'Darwin')

  - publish: $(System.DefaultWorkingDirectory)/target/wheels
    artifact: Wheels.Win
    displayName: Upload Python Artifacts Win
    condition: eq(variables['Agent.OS'], 'Windows_NT')

  - publish: $(System.DefaultWorkingDirectory)/target/wheels/*manylinux*.whl
    artifact: Wheels.Linux.${{ variables['arch'] }}
    displayName: Upload Python Artifacts Linux
    condition: eq(variables['Agent.OS'], 'Linux')

# TODO: For an automated nightly release, the approval requirement should be skipped
- job: "Approval"
  dependsOn:
  - Node
  - VSCode
  - JupyterLab
  - PlatformSpecificPython

  pool: server
  timeoutInMinutes: 1440 # job times out in 1 day
  steps:
  - task: ManualValidation@0
    timeoutInMinutes: 1440 # task times out in 1 day
    inputs:
      notifyUsers: ''
      instructions: 'Please verify artifacts and approve the release'
      onTimeout: 'reject'
