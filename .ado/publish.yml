# Publishing VSCode Extensions: https://code.visualstudio.com/api/working-with-extensions/publishing-extension
#   * $(PAT): https://stackoverflow.com/questions/58192624/publishing-vs-code-extension-via-azure-devops/58195815#58195815
#   * Extension Manifest (package.json): https://code.visualstudio.com/api/references/extension-manifest
# Building Py .whl for multiple Linux distros - manylinux: https://github.com/pypa/manylinux
# aarch64 (ARM64) support for manylinux builds: https://codepyre.com/2019/12/arming-yourself/

variables:
  VSCodeExtensionBuildPlatform: 'Linux'
  PlatfIndepPyPackBuildPlatf: 'Linux'

name: $(BuildId)

trigger: none
pr: none

jobs:
- job: "Build"
  strategy:
    matrix:
      linux_x64:                        # 2023.06.30 ESRP Publishing of Py packs is not supported for linux_x86_64.
                                        # The "manylinux" approach is used.
        imageName: 'ubuntu-latest'      # Manylinux Py (x86_64) + VSCode Ext.
        arch: x86_64
      linux_ARM64:
        imageName: 'ubuntu-latest'      # Manylinux Py (ARM64). Takes 45 - 65 minutes, hence is in a separate job.
        arch: aarch64
      mac:
        imageName: 'macOS-latest'       # MacOS-specific Py (Mac is usually quite limited).
        arch: x86_64
      windows:
        imageName: 'windows-latest'     # Win-specific Py + Platform-independent Py.
        arch: x86_64
  pool:
    vmImage: $(imageName)
  variables:
    arch: $(arch)
  timeoutInMinutes: 90

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.11'

  - script: |
      python ./prereqs.py --install && python ./build_version.py
    displayName: Install Prereqs and set version

  - script: |
      npm install -g @vscode/vsce
    displayName: Install Prereqs for VSCode Extension
    condition: and(eq(variables['Agent.OS'], '${{ variables.VSCodeExtensionBuildPlatform }}'), eq(variables['arch'], 'x86_64'))

  - script: |
      python build.py --wasm --npm --vscode
    displayName: Build VSCode Extension
    condition: and(eq(variables['Agent.OS'], '${{ variables.VSCodeExtensionBuildPlatform }}'), eq(variables['arch'], 'x86_64'))

  - script: |
      vsce package --pre-release
    displayName: Pack VSCode Extension
    workingDirectory: '$(System.DefaultWorkingDirectory)/vscode'
    condition: and(eq(variables['Agent.OS'], '${{ variables.VSCodeExtensionBuildPlatform }}'), eq(variables['arch'], 'x86_64'))

  - publish: $(System.DefaultWorkingDirectory)/vscode
    artifact: VSIX
    displayName: Upload VSCode Extension Artifact
    condition: and(eq(variables['Agent.OS'], '${{ variables.VSCodeExtensionBuildPlatform }}'), eq(variables['arch'], 'x86_64'))

  - script: |
      python build.py --pip --no-check --no-test --no-check-prereqs
    displayName: Build Platform-Dependent Py Packages, non-Linux
    condition: ne(variables['Agent.OS'], 'Linux')

  - script: |
      set -x -e

      export ARCH=${{ variables['arch'] }}

      if [ "$ARCH" == "aarch64" ]; then
        # The aarch64 (ARM64) emulation support:
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          qemu qemu-system-misc qemu-user-static qemu-user
      fi

      chmod +x pip/build_manylinux.sh

      # images: https://github.com/pypa/manylinux#docker-images
      docker run \
        --env ARCH=$ARCH --rm -i -v `pwd`:/io \
        quay.io/pypa/manylinux_2_28_$ARCH \
        /io/pip/build_manylinux.sh

      ls target/wheels
    displayName: Build Platform-Dependent Py Packages, Linux
    condition: eq(variables['Agent.OS'], 'Linux')

  - script: |
      python build.py --jupyterlab
    displayName: Build Platform-Independent Py Packages
    condition: and(eq(variables['Agent.OS'], '${{ variables.PlatfIndepPyPackBuildPlatf }}'), eq(variables['arch'], 'x86_64'))

  - script: |
      dir target\wheels\*
    displayName: List Py Packages on Win
    condition: eq(variables['Agent.OS'], 'Windows_NT')

  - script: |
      ls target/wheels/*
    displayName: List Py Packages on non-Win
    condition: ne(variables['Agent.OS'], 'Windows_NT')

  - publish: $(System.DefaultWorkingDirectory)/target/wheels
    artifact: Wheels.Mac
    displayName: Upload Python Artifacts Mac
    condition: eq(variables['Agent.OS'], 'Darwin')

  - publish: $(System.DefaultWorkingDirectory)/target/wheels
    artifact: Wheels.Win
    displayName: Upload Python Artifacts Win
    condition: eq(variables['Agent.OS'], 'Windows_NT')

  - publish: $(System.DefaultWorkingDirectory)/target/wheels
    artifact: Wheels.Linux.${{ variables['arch'] }}
    displayName: Upload Python Artifacts Linux
    condition: eq(variables['Agent.OS'], 'Linux')


- job: "Publish"
  dependsOn: Build
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - download: current
    artifact: Wheels.Win
    displayName: Download Python Artifacts Win

  - download: current
    artifact: Wheels.Mac
    displayName: Download Python Artifacts Mac

  - download: current
    artifact: Wheels.Linux.x86_64
    displayName: Download Python Artifacts Linux

  - download: current
    artifact: Wheels.Linux.aarch64
    displayName: Download Python Artifacts Linux

  - script: |
      mkdir -p                            target/wheels
      mv ../Wheels.Linux.x86_64/*.whl     target/wheels
      mv ../Wheels.Linux.aarch64/*.whl    target/wheels
      mv ../Wheels.Win/*.whl              target/wheels
      mv ../Wheels.Mac/*.whl              target/wheels
      ls                                  target/wheels/*
    displayName: Move Py Artifacts to Publishing Dir

  - download: current
    artifact: VSIX
    displayName: Download VSCode Extension Artifact

  - script: |
      npm install -g @vscode/vsce
    displayName: Install Prereqs for VSCode Ext Publishing


  # NB: Publishing must be the last thing (done only if all previous steps are successful).

  - task: EsrpRelease@2
    inputs:
     ConnectedServiceName: 'ESRP_Release'
     Intent: 'PackageDistribution'
     ContentType: 'PyPi'
     PackageLocation: '$(System.DefaultWorkingDirectory)/target/wheels'
     Owners: '$(OwnerPersonalAlias)@microsoft.com'  # NB: ESRP corrected from group email `qdevtools` to personal one.
                                                    #     Group email here fails the task with non-actionable output.
     Approvers: 'billti@microsoft.com'
     # Auto-inserted Debugging defaults:
     ServiceEndpointUrl: 'https://api.esrp.microsoft.com'
     MainPublisher: 'QuantumDevelpmentKit'          # ESRP Team's Correction (including the critical typo "Develpm").
     DomainTenantId: '72f988bf-86f1-41af-91ab-2d7cd011db47'
    displayName: Publish Py Packages

  - script: |
      VSIX_RPATH=../VSIX
      VSIX_FNAME=`ls $VSIX_RPATH`
      vsce publish --pat $(PAT) --packagePath $VSIX_RPATH/$VSIX_FNAME 2>&1 > pub.log
    displayName: Publish VSCode Extension

  - script: |
      dir
      cat pub.log
    displayName: If failed, display VSCode Publishing Results
    condition: failed()
    workingDirectory: '$(System.DefaultWorkingDirectory)/vscode'

# TODO: npm package publishing, and JupyterLab extension publishing.
