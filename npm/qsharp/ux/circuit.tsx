// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import * as qviz from "@microsoft/quantum-viz.js/lib";
import { useEffect, useRef, useState } from "preact/hooks";
import { CircuitProps } from "./data.js";
import { Spinner } from "./spinner.js";

// For perf reasons we set a limit on how many gates/qubits
// we attempt to render. This is still a lot higher than a human would
// reasonably want to look at, but it takes about a second to
// render a circuit this big on a mid-grade laptop so we allow it.
const MAX_OPERATIONS = 10000;
const MAX_QUBITS = 1000;

/* This component is shared by the Python widget and the VS Code panel */
export function Circuit(props: { circuit: qviz.Circuit }) {
  const circuitDiv = useRef<HTMLDivElement>(null);
  const [zoomLevel, setZoomLevel] = useState<number | undefined>(undefined);
  const [rendering, setRendering] = useState(true);

  const errorDiv =
    props.circuit.qubits.length === 0 ? (
      <div>
        <p>No circuit to display. No qubits have been allocated.</p>
      </div>
    ) : props.circuit.operations.length > MAX_OPERATIONS ? (
      <div>
        <p>
          This circuit has too many gates to display. It has{" "}
          {props.circuit.operations.length} gates, but the maximum supported is{" "}
          {MAX_OPERATIONS}.
        </p>
      </div>
    ) : props.circuit.qubits.length > MAX_QUBITS ? (
      <div>
        <p>
          This circuit has too many qubits to display. It has{" "}
          {props.circuit.qubits.length} qubits, but the maximum supported is{" "}
          {MAX_QUBITS}.
        </p>
      </div>
    ) : undefined;

  useEffect(() => {
    if (errorDiv !== undefined) {
      circuitDiv.current!.innerHTML = "";
      setRendering(false);
      return;
    }

    qviz.draw(props.circuit, circuitDiv.current!);
    setRendering(false);

    // quantum-viz hardcodes the styles in the SVG.
    // Remove the style elements -- we'll define the styles in our own CSS.
    const styleElements = circuitDiv.current?.querySelectorAll("style");
    styleElements?.forEach((tag) => tag.remove());

    // Initialize the zoom level based on window width
    initZoomLevel();
  }, [props.circuit]);

  useEffect(() => {
    updateWidth();
  }, [zoomLevel]);

  return (
    <div>
      <div class="qs-circuit-error">{errorDiv}</div>
      <div>
        {zoomLevel !== undefined ? (
          <p>
            <label htmlFor="qs-circuit-zoom">Zoom </label>
            <input
              id="qs-circuit-zoom"
              type="number"
              min="10"
              max="100"
              step="10"
              value={zoomLevel}
              onInput={(e) =>
                setZoomLevel(
                  parseInt((e.target as HTMLInputElement).value) || 0,
                )
              }
            />
            %
          </p>
        ) : null}
      </div>
      <div>
        {rendering
          ? `Rendering diagram with ${props.circuit.operations.length} gates...`
          : ""}
      </div>
      <div class="qs-circuit" ref={circuitDiv}></div>
    </div>
  );

  /**
   * Initializes the zoom level to fit the circuit diagram in the container
   */
  function initZoomLevel() {
    const svg = circuitDiv.current?.getElementsByClassName("qviz")[0];
    if (svg) {
      console.debug("initializing zoom level");
      const containerWidth = circuitDiv.current.clientWidth;
      // width and height the true dimensions generated by qviz
      const width = parseInt(svg.getAttribute("width")!);
      const height = svg.getAttribute("height")!;

      svg.setAttribute("viewBox", `0 0 ${width} ${height}`);
      const zoom = Math.min(Math.ceil((containerWidth / width) * 100), 100);
      setZoomLevel(zoom);
      updateWidth();
    }
  }

  /**
   * Updates the width of the SVG based on the zoom level
   */
  function updateWidth() {
    const svg = circuitDiv.current?.getElementsByClassName("qviz")[0];
    if (svg) {
      const width = svg.getAttribute("width")!;
      svg.setAttribute(
        "style",
        `max-width: ${width}; width: ${(parseInt(width) * (zoomLevel || 100)) / 100}; height: auto`,
      );
      console.log(`updated width with zoomLevel=${zoomLevel}`);
    }
  }
}

/* This component is exclusive to the VS Code panel */
export function CircuitPanel(props: CircuitProps) {
  const error = props.errorHtml ? (
    <div>
      <p>
        {props.circuit
          ? "The program encountered a failure. See the error(s) below."
          : "A circuit could not be generated for this program. See the error(s) below."}
        <br />
      </p>
      <div dangerouslySetInnerHTML={{ __html: props.errorHtml }}></div>
    </div>
  ) : null;

  return (
    <div class="qs-circuit-panel">
      <div>
        <h1>
          {props.title} {props.simulated ? "(Trace)" : ""}
        </h1>
      </div>
      <div class="qs-circuit-error">{error}</div>
      <p>{props.targetProfile}</p>
      <p>
        {
          props.isDynamic
            ? "WARNING: This diagram shows the result of tracing a dynamic circuit, and may change from run to run."
            : "\xa0" /* nbsp to keep line height consistent */
        }
      </p>
      <p>
        Learn more at{" "}
        <a href="https://aka.ms/qdk.circuits">https://aka.ms/qdk.circuits</a>
      </p>
      {props.calculating ? (
        <div>
          <Spinner />
        </div>
      ) : null}
      {props.circuit ? <Circuit circuit={props.circuit}></Circuit> : null}
    </div>
  );
}
