// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

use enum_iterator::Sequence;
use std::{result, str::FromStr};

pub(super) use Keyword::*;

#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq, Sequence)]
pub(super) enum Keyword {
    Adj,
    Adjoint,
    AdjointUpper,
    And,
    Apply,
    As,
    Auto,
    BigInt,
    Body,
    Bool,
    Borrow,
    Controlled,
    ControlledUpper,
    Ctl,
    Distribute,
    Double,
    Elif,
    Else,
    Fail,
    False,
    Fixup,
    For,
    Function,
    If,
    In,
    Int,
    Internal,
    Intrinsic,
    Invert,
    Is,
    Let,
    Mutable,
    Namespace,
    Newtype,
    Not,
    One,
    Open,
    Operation,
    Or,
    Pauli,
    PauliI,
    PauliX,
    PauliY,
    PauliZ,
    Qubit,
    Range,
    Repeat,
    Result,
    Return,
    Slf,
    Set,
    String,
    True,
    Underscore,
    Unit,
    Until,
    Use,
    While,
    Within,
    Zero,
}

impl Keyword {
    pub(super) fn as_str(self) -> &'static str {
        match self {
            Adj => "Adj",
            Adjoint => "adjoint",
            AdjointUpper => "Adjoint",
            And => "and",
            Apply => "apply",
            As => "as",
            Auto => "auto",
            BigInt => "BigInt",
            Body => "body",
            Bool => "Bool",
            Borrow => "borrow",
            Controlled => "controlled",
            ControlledUpper => "Controlled",
            Ctl => "Ctl",
            Distribute => "distribute",
            Double => "Double",
            Elif => "elif",
            Else => "else",
            Fail => "fail",
            False => "false",
            Fixup => "fixup",
            For => "for",
            Function => "function",
            If => "if",
            In => "in",
            Int => "Int",
            Internal => "internal",
            Intrinsic => "intrinsic",
            Invert => "invert",
            Is => "is",
            Let => "let",
            Mutable => "mutable",
            Namespace => "namespace",
            Newtype => "newtype",
            Not => "not",
            One => "One",
            Open => "open",
            Operation => "operation",
            Or => "or",
            Pauli => "Pauli",
            PauliI => "PauliI",
            PauliX => "PauliX",
            PauliY => "PauliY",
            PauliZ => "PauliZ",
            Qubit => "Qubit",
            Range => "Range",
            Repeat => "repeat",
            Result => "Result",
            Return => "return",
            Slf => "self",
            Set => "set",
            String => "String",
            True => "true",
            Underscore => "_",
            Unit => "Unit",
            Until => "until",
            Use => "use",
            While => "while",
            Within => "within",
            Zero => "Zero",
        }
    }
}

impl FromStr for Keyword {
    type Err = ();

    fn from_str(s: &str) -> result::Result<Self, Self::Err> {
        enum_iterator::all::<Self>()
            .find(|kw| kw.as_str() == s)
            .ok_or(())
    }
}
